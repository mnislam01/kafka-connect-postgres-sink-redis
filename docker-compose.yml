version: "3.7"

services:
    web:
        build:
            context: .
            dockerfile: compose-files/web/Dockerfile
        container_name: web
        hostname: web
        ports:
            - "8001:8001"
        volumes:
            - ./dtweet:/app
        env_file:
            - ./envs/web/secret-envs
        command: >
            sh -c "python manage.py wait_for_db
                   python manage.py migrate
                   python manage.py runserver 0.0.0.0:8001"
        depends_on:
            - db

    db:
        image: debezium/postgres:12-alpine
        container_name: postgres
        hostname: db
        volumes:
            - pg_data:/var/lib/postgresql/data/
            - pg_archive:/var/lib/postgresql-master/archive
        env_file:
            - ./envs/db/secret-envs

    redis:
        image: redis:alpine
        container_name: my-redis
        hostname: redis
        ports:
            - "6379:6379"

    zookeeper:
        image: confluentinc/cp-zookeeper:5.1.2
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    broker:
        image: confluentinc/cp-enterprise-kafka:5.1.2
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
            - "29092:29092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
            CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: 'true'
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

    control-center:
        image: confluentinc/cp-enterprise-control-center:5.1.2
        hostname: control-center
        container_name: control-center
        depends_on:
            - zookeeper
            - broker
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
            CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
            CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
            CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
            CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONFLUENT_METRICS_TOPIC_REPLICATION: 1
            PORT: 9021


    kafka-setup:
        image: confluentinc/cp-kafka:5.1.1
        hostname: kafka-setup
        container_name: kafka-setup
        depends_on:
            - broker
        command: "bash -c 'echo Waiting for Kafka to be ready... && \
                           cub kafka-ready -z zookeeper:2181 1 30 && \
                           kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic connect-config-storage && \
                           kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic connect-offset-storage && \
                           kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic connect-status-storage && \
                           kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic to-redis'"
        environment:
            KAFKA_BROKER_ID: ignored
            KAFKA_ZOOKEEPER_CONNECT: ignored

    connect:
        build:
            context: .
            dockerfile: compose-files/kafka/connect/Dockerfile
        container_name: connect
        hostname: connect
        ports:
            - "8088:8088"
        depends_on:
            - broker
            - kafka-setup
        environment:
            CONNECT_BOOTSTRAP_SERVERS: broker:9092
            CONNECT_GROUP_ID: "connect-group"
            CONNECT_CONFIG_STORAGE_TOPIC: "connect-config-storage"
            CONNECT_OFFSET_STORAGE_TOPIC: "connect-offset-storage"
            CONNECT_STATUS_STORAGE_TOPIC: "connect-status-storage"
            CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
            CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.converters.ByteArrayConverter"
            CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            CONNECT_PLUGIN_PATH: "/usr/share/confluent-hub-components"
            CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
            CONNECT_REST_HOST_NAME: "connect"
            CONNECT_REST_PORT: "8088"
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
            CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.1.1.jar
            CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"


volumes:
    pg_data:
    pg_archive:
